[{"C:\\projects\\sandbox\\lib\\src\\index.js":"1","C:\\projects\\sandbox\\lib\\src\\reportWebVitals.js":"2","C:\\projects\\sandbox\\lib\\src\\App.js":"3","C:\\projects\\sandbox\\lib\\src\\store.js":"4","C:\\projects\\sandbox\\lib\\src\\server.js":"5","C:\\projects\\sandbox\\lib\\src\\game.js":"6"},{"size":657,"mtime":1610025002410,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":3169,"mtime":1610032924058,"results":"10","hashOfConfig":"8"},{"size":2470,"mtime":1610033515263,"results":"11","hashOfConfig":"8"},{"size":610,"mtime":1610029090413,"results":"12","hashOfConfig":"8"},{"size":10115,"mtime":1610199201414,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"gcdips",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\projects\\sandbox\\lib\\src\\index.js",[],["29","30"],"C:\\projects\\sandbox\\lib\\src\\reportWebVitals.js",[],"C:\\projects\\sandbox\\lib\\src\\App.js",["31"],"import './App.css';\nimport classNames from 'classnames';\nimport { useEffect, Fragment } from 'react';\nimport { useSelector, useDispatch, } from 'react-redux';\nimport { start, move } from './store';\n\nfunction Cell({ row, column, index }) {\n  let field = useSelector(state => state.game.fields[index]);\n  let nextPlayer = useSelector(state => state.game.nextPlayer);\n  let prevMove = useSelector(state => state.game.prevMove[index]);\n  let cell = field[row][column];\n\n  let className = classNames('cell', 'cell-index-' + row + '-' + column, {\n    'cell-ship': index === 0 && cell.type === 'O',\n    'cell-border': cell.type === 'B',\n    'cell-missed': cell.type === 'X',\n    'cell-injured': cell.type === 'I',\n    'cell-killed': cell.type === 'K',\n    'cell-next-move': row === prevMove.x && column === prevMove.y && cell.type !== 'K',\n  });\n\n  let dispatch = useDispatch();\n\n  return (\n    <div className={className} onClick={() => {\n      if (nextPlayer === 1) {\n        dispatch(move({ x: cell.x, y: cell.y, fieldIndex: index }));\n      }\n    }}></div>\n  );\n}\n\nfunction Bot() {\n  let nextMove = useSelector(state => state.game.nextMove[0]);\n  let nextPlayer = useSelector(state => state.game.nextPlayer);\n  let dispatch = useDispatch();\n\n  useEffect(() => {\n    let interval = setInterval(() => {\n      if (!!nextMove && nextPlayer === 0)\n        dispatch(move({ x: nextMove.x, y: nextMove.y, fieldIndex: 0 }));\n    }, 500);\n    return () => clearInterval(interval);\n  }, [dispatch, nextMove, nextPlayer]);\n\n  return (<Fragment></Fragment>);\n}\n\nfunction Row({ index, children }) {\n  let className = classNames('row', 'row-index-' + index);\n\n  return (\n    <div className={className}>{children}</div>\n  );\n}\n\nfunction Info() {\n  let nextPlayer = useSelector(state => state.game.nextPlayer);\n  let status = useSelector(state => state.game.status);\n\n  return (\n    <Fragment>\n      {nextPlayer === 1 && <Row><span>Your turn</span></Row>}\n      {nextPlayer !== 1 && <Row><span>Opponent turn</span></Row>}\n    </Fragment>\n  );\n}\n\nfunction Field({ index }) {\n  let rows = [];\n\n  let className = classNames('field', {\n    'field-self': index === 0,\n    'field-enemy': index === 1,\n  });\n\n  for (let i = 0; i < 10; i++) {\n    let cells = [];\n    for (let j = 0; j < 10; j++) {\n      cells.push(<Cell key={i * 10 + j} row={i} column={j} index={index}></Cell>);\n    }\n    rows.push(<Row key={i} index={i}>{cells}</Row>);\n  }\n\n  return (\n    <div className={className}>\n      {rows}\n    </div>\n  );\n}\n\nfunction Game() {\n  return (\n    <Fragment>\n      <Row>\n        <Info></Info>\n      </Row>\n      <Field index={0}></Field>\n      <Field index={1}></Field>\n      <Bot></Bot>\n    </Fragment>\n  );\n}\n\nfunction App() {\n  let dispatch = useDispatch();\n  let status = useSelector(state => state.game.status);\n  return (\n    <div className='game'>\n      {status === -1 && (<Fragment><Game></Game><Row></Row></Fragment>)}\n      {status === 0 && (<span>You lose</span>)}\n      {status === 1 && (<span>You win</span>)}\n      {(status === -2 || status > -1) && (<Row>\n        <button onClick={() => dispatch(start())}>New game</button>\n      </Row>)}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\projects\\sandbox\\lib\\src\\store.js",[],"C:\\projects\\sandbox\\lib\\src\\server.js",["32"],"import { createServer } from \"miragejs\"\r\nimport { start, move } from './game'\r\n\r\nexport default function () {\r\n    createServer({\r\n        routes() {\r\n\r\n            this.get(\"/api/game\", () => {\r\n                return start()\r\n            })\r\n\r\n            this.post(\"/api/game\", (schema, request) => {\r\n\r\n                let changes;\r\n\r\n                try {\r\n                    changes = move(JSON.parse(request.requestBody));\r\n                }\r\n                catch (ex) {\r\n                    console.log(ex)\r\n                }\r\n\r\n                return changes\r\n            })\r\n\r\n        },\r\n    })\r\n}","C:\\projects\\sandbox\\lib\\src\\game.js",["33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":59,"column":7,"nodeType":"40","messageId":"41","endLine":59,"endColumn":13},{"ruleId":"42","severity":1,"message":"43","line":4,"column":1,"nodeType":"44","endLine":28,"endColumn":2},{"ruleId":"45","severity":1,"message":"46","line":146,"column":79,"nodeType":"47","messageId":"48","endLine":146,"endColumn":177},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'status' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'ships', 'ships'.","ArrowFunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]